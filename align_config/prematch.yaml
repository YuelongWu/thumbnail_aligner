prematch:
    scale: 0.25
    preprocessing:              # pre processing configs
        func1: local_radon.pre_imclearborder
        params1:
            thresh: 0         # relative threshold
            feather: 20         # feather width
            dilatesz: 1
            medfiltsz: 3
            roi_thresh: [-1, 256]
            roi_erode: 1
        
        func2: local_radon.pre_imclearborder
        params2:
            thresh: 0         # relative threshold
            feather: 20         # feather width
            dilatesz: 1
            medfiltsz: 3
            roi_thresh: [-1, 256]
            roi_erode: 1

    detector:                   # detector configs
        func: local_radon.detect_log_blobs
        params:
            nfeatures: 3000     # maximum number of features
            sigma: 4            # sigma of LoG filter
            min_dis: 15         # minimum distance between keypoints
            thresh: 0.01         # minimum threshold wrt the highest peak
            medfiltsz: 3        # size of median filter
            imgpower: 1      # power used in preprocessing
            nfeatsubmin: 0.2    # minimum number of features in each subregion
            nfeatsubgain: 1.25

    descriptor:
        func: local_radon.descriptor_local_radon
        params:
            proj_num: 12
            beam_num: 16
            beam_wd: 5
            eccentric: true
            filter_blur: 1
            beam_radius: 50
            regularize_orientaion: true
            orientation_func: local_radon.orient_2nd_moment

    matcher:
        func: local_radon.descriptor_compare_global
        params:
            orientation_func: local_radon.orient_2nd_moment
            compare_method: fast    # fast or bf (brute_force)
            compare_dim: 1          # 0-twoway 1-smaller 2-larger
            min_corr: 0.5           # minimum correlation between descriptors
            refine_max_dis: 200            # maximum distance tolerance for refined matching

    filters:
        filter1:
            func: geometries.filter_pw_strain
            params:
                strain_limit: 0.2
                displc_limit: 50
                shear_limit: 30     # in degree
                thresh: 0.5
                d_whisker:  100
                filter_angle: true

        filter3:
            func: geometries.filter_global_ransac
            params:
                max_iter: 1000
                dis_tol: 25        # distance considered as inliner
                match_exit_num: 100  # number of matches to exit
                match_exit_ratio: 0.85

finematch:
    preprocessing:              # pre processing configs
        func: PMCC.pre_imclearborder_log
        params:
            max_val: 255        # maximum
            thresh: 0          # relative threshold
            feather: 20         # feather width
            feather_small: 15   # smaller feather width
            dilatesz: 0
            medfiltsz: 3
            roi_thresh: [0, inf]
            roi_erode: 1
            img_power: 1
            sigma: 2    # sigma for LoG filter

    detector:
        # func: PMCC.detect_locmax_cbdis
        func: PMCC.detect_regular_grid
        params:
            nfeature: [50000, 10000]
            min_dis: [50, 125]
            nb_size: [100, 150]
            fft: [false, true]
            thresh: 0.01
            nfeatsubmin: 0.2    # minimum number of features in each subregion
            nfeatsubgain: 1.25

    matcher:
        func: PMCC.block_match
        params:
            rot_thresh: 5  # indegree
            search_range: 150
            mask_disk: 15
            min_conf: 0.2

    filters:
        apply_limit: true
        rotation_limit: 180
        shear_limit: 0.25
        displc_limit: 1000
        filter1:
            func: geometries.filter_global_ransac
            params:
                max_iter: 100
                dis_tol: 100       # distance considered as inliner
                match_exit_num: 50  # number of matches to exit
                match_exit_ratio: 0.85
        filter2:
            func: geometries.filter_2d_tree_affine
            params:
                leafsize: 15
                dimrange: 400
                dis_tol: 10

optimizer:
    mesh_space: 75
    expand_region: false
    wrinkle_feather: 250
    inregion_soften: true
    mass_power: 0.25
    stiff_power: 2
    smooth_fun: gaussian
    cross_region_multiplier: 1
    func: elastic_mesh.BGD
    params:
        max_iter: 1000
        learning_rate: 0.02
        momentum: 0.5
        momentum_diminish: 0.1
        min_learn_rate: 1e-3
        smooth_gradient: false
        smooth_start_knsz: 1
        smooth_knsz_diminish: 0.75
        smooth_end_kernel_sz: 0.3
        intra_section:
            func: elastic_mesh.rigidity_huber
            params:
                multiplier: 0.3
                huber_len: 200
                min_stiff: 0.5
                compression_gain: 1
        cross_section:
            func: elastic_mesh.crosslink_huber
            params:
                mulitplier: 3
                huber_len: 100

render:
    mesh_size: 50
    outmask_power: 1
    inmask_feather: 150
    inoutmask_ratio: 10000
    prevent_identical: true
    glue_width: 80
    inoutmask_ratio: 50
    model: affine